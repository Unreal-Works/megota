import add from "../additive/add";
import clone from "../clone";
import lessThan from "../comparison/lessThan";
import lessThanOrEquals from "../comparison/lessThanOrEquals";
import { MegotaConstants } from "../constants";
import toNumber from "../display/toNumber";
import pow from "../exponential/pow";
import sqrt from "../exponential/sqrt";
import div from "../multiplicative/div";
import mul from "../multiplicative/mul";
import fromNumber from "../parsing/fromNumber";
import paste from "../paste";
import isInteger from "../unary/isInteger";
import gamma from "./gamma";


const factorials = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000, 51090942171709440000, 1.1240007277776076800e+21, 2.5852016738884978213e+22, 6.2044840173323941000e+23, 1.5511210043330986055e+25, 4.0329146112660565032e+26, 1.0888869450418351940e+28, 3.0488834461171387192e+29, 8.8417619937397018986e+30, 2.6525285981219106822e+32, 8.2228386541779224302e+33, 2.6313083693369351777e+35, 8.6833176188118859387e+36, 2.9523279903960415733e+38, 1.0333147966386145431e+40, 3.7199332678990125486e+41, 1.3763753091226345579e+43, 5.2302261746660111714e+44, 2.0397882081197444123e+46, 8.1591528324789768380e+47, 3.3452526613163807956e+49, 1.4050061177528799549e+51, 6.0415263063373834074e+52, 2.6582715747884488694e+54, 1.1962222086548018857e+56, 5.5026221598120891536e+57, 2.5862324151116817767e+59, 1.2413915592536072528e+61, 6.0828186403426752249e+62, 3.0414093201713375576e+64, 1.5511187532873821895e+66, 8.0658175170943876846e+67, 4.2748832840600254848e+69, 2.3084369733924137924e+71, 1.2696403353658276447e+73, 7.1099858780486348103e+74, 4.0526919504877214100e+76, 2.3505613312828784949e+78, 1.3868311854568983861e+80, 8.3209871127413898951e+81, 5.0758021387722483583e+83, 3.1469973260387939390e+85, 1.9826083154044400850e+87, 1.2688693218588416544e+89, 8.2476505920824715167e+90, 5.4434493907744306945e+92, 3.6471110918188683221e+94, 2.4800355424368305480e+96, 1.7112245242814129738e+98, 1.1978571669969892213e+100, 8.5047858856786230047e+101, 6.1234458376886084639e+103, 4.4701154615126843855e+105, 3.3078854415193862416e+107, 2.4809140811395399745e+109, 1.8854947016660503806e+111, 1.4518309202828587210e+113, 1.1324281178206296794e+115, 8.9461821307829757136e+116, 7.1569457046263805709e+118, 5.7971260207473678414e+120, 4.7536433370128420198e+122, 3.9455239697206587884e+124, 3.3142401345653531943e+126, 2.8171041143805501310e+128, 2.4227095383672734128e+130, 2.1077572983795278544e+132, 1.8548264225739843605e+134, 1.6507955160908460244e+136, 1.4857159644817615149e+138, 1.3520015276784029158e+140, 1.2438414054641308179e+142, 1.1567725070816415659e+144, 1.0873661566567430754e+146, 1.0329978488239059305e+148, 9.9167793487094964784e+149, 9.6192759682482120384e+151, 9.4268904488832479837e+153, 9.3326215443944153252e+155, 9.3326215443944150966e+157, 9.4259477598383598816e+159, 9.6144667150351270793e+161, 9.9029007164861804721e+163, 1.0299016745145628100e+166, 1.0813967582402909767e+168, 1.1462805637347083683e+170, 1.2265202031961380050e+172, 1.3246418194518290179e+174, 1.4438595832024936625e+176, 1.5882455415227430287e+178, 1.7629525510902445874e+180, 1.9745068572210740115e+182, 2.2311927486598137657e+184, 2.5435597334721876552e+186, 2.9250936934930159967e+188, 3.3931086844518980862e+190, 3.9699371608087210616e+192, 4.6845258497542909237e+194, 5.5745857612076058231e+196, 6.6895029134491271205e+198, 8.0942985252734440920e+200, 9.8750442008336010580e+202, 1.2146304367025329301e+205, 1.5061417415111409314e+207, 1.8826771768889261129e+209, 2.3721732428800468512e+211, 3.0126600184576594309e+213, 3.8562048236258040716e+215, 4.9745042224772874590e+217, 6.4668554892204741474e+219, 8.4715806908788206314e+221, 1.1182486511960043298e+224, 1.4872707060906857134e+226, 1.9929427461615187928e+228, 2.6904727073180504073e+230, 3.6590428819525488642e+232, 5.0128887482749919605e+234, 6.9177864726194885808e+236, 9.6157231969410893532e+238, 1.3462012475717525742e+241, 1.8981437590761708898e+243, 2.6953641378881628530e+245, 3.8543707171800730787e+247, 5.5502938327393044385e+249, 8.0479260574719917061e+251, 1.1749972043909107097e+254, 1.7272458904546389230e+256, 2.5563239178728653927e+258, 3.8089226376305697893e+260, 5.7133839564458546840e+262, 8.6272097742332399855e+264, 1.3113358856834524492e+267, 2.0063439050956822953e+269, 3.0897696138473507759e+271, 4.7891429014633940780e+273, 7.4710629262828942235e+275, 1.1729568794264144743e+278, 1.8532718694937349890e+280, 2.9467022724950384028e+282, 4.7147236359920616095e+284, 7.5907050539472189932e+286, 1.2296942187394494177e+289, 2.0044015765453026266e+291, 3.2872185855342959088e+293, 5.4239106661315886750e+295, 9.0036917057784375454e+297, 1.5036165148649991456e+300, 2.5260757449731984219e+302, 4.2690680090047051083e+304, 7.2574156153079990350e+306];

const limit = fromNumber(170);

/**
 * Calculates the factorial of this MegotaNumber.
 * 
 * The factorial is defined as n! = n * (n-1) * (n-2) * ... * 1 for positive integers n.
 * It is also defined for non-integer values using the gamma function.
 */
function factorial(value: BaseMegota): void {

    if (lessThan(value, MegotaConstants.ZERO) || !isInteger(value)) {
        add(value, MegotaConstants.ONE);
        gamma(value);
        return;
    }

    if (lessThanOrEquals(value, limit)) {
        fromNumber(factorials[toNumber(value)], value);
        return;
    }

    const errorFixer = 1;
    let e = toNumber(value);
    if (e < 500) e += 163879 / 209018880 * Math.pow(e, 5);
    if (e < 1000) e += -571 / 2488320 * Math.pow(e, 4);
    if (e < 50000) e += -139 / 51840 * Math.pow(e, 3);
    if (e < 1e7) e += 1 / 288 * Math.pow(e, 2);
    if (e < 1e20) e += 1 / 12 * e;

    const xPiTwo = clone(value);
    mul(xPiTwo, MegotaConstants.PI);
    mul(xPiTwo, MegotaConstants.TWO);
    sqrt(xPiTwo);

    const t1 = clone(value);
    div(t1, MegotaConstants.E);
    pow(t1, value);
    mul(t1, xPiTwo);
    mul(t1, fromNumber(errorFixer));

    paste(value, t1);


    return;
};

export default factorial;